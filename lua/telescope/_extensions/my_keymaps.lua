local pickers = require("telescope.pickers")
local finders = require("telescope.finders")
local conf = require("telescope.config").values
local actions = require("telescope.actions")
local action_state = require("telescope.actions.state")

return require("telescope").register_extension({
	exports = {
		my_keymaps = function(opts)
			opts = opts or {}
			pickers
				.new(opts, {
					prompt_title = "Keymaps + Plugins",
					finder = finders.new_table({
						results = {
							{ "[------] ----- (--------)", "---------", "-------------" },
							{ "[n] <Tab>p (BufferLine)", "<Cmd>BufferLinePick <CR>", "New tab with this buffer" },
							{ "[n] <Tab>m", "<Cmd>tabnew % <CR>", "New tab with this buffer" },
							{ "[n] <Tab>w", ":tabclose <CR>", "Close this tab" },
							{ "[n] <Tab>t", ":tabnew <CR>", "Open a new tab" },
							{ "[n] <Tab>h", ":tabp <CR>", "Previous tab" },
							{ "[n] <Tab>l", ":tabn <CR>", "Next tab" },
							{ "[n] &", ":&&<CR>", ":help &-default" },
							{ "[n] Y", "y$", ":help Y-default" },
							{ "[n] [ ", "", "Add empty line above cursor" },
							{ "[n] [B", "", ":brewind" },
							{ "[n] [b", "", ":bprevious" },
							{ "[n] [<C-T>", "", ":ptprevious" },
							{ "[n] [T", "", ":trewind" },
							{ "[n] [t", "", ":tprevious" },
							{ "[n] [A", "", ":rewind" },
							{ "[n] [a", "", ":previous" },
							{ "[n] [<C-L>", "", ":lpfile" },
							{ "[n] [L", "", ":lrewind" },
							{ "[n] [l", "", ":lprevious" },
							{ "[n] [<C-Q>", "", ":cpfile" },
							{ "[n] [Q", "", ":crewind" },
							{ "[n] [q", "", ":cprevious" },
							{ "[n] [D (LSP)", "", "Jump to the first diagnostic in the current buffer" },
							{ "[n] [d (LSP)", "", "Jump to the previous diagnostic in the current buffer" },
							{ "[n] ] ", "", "Add empty line below cursor" },
							{ "[n] ]B", "", ":blast" },
							{ "[n] ]b", "", ":bnext" },
							{ "[n] ]<C-T>", "", ":ptnext" },
							{ "[n] ]T", "", ":tlast" },
							{ "[n] ]t", "", ":tnext" },
							{ "[n] ]A", "", ":last" },
							{ "[n] ]a", "", ":next" },
							{ "[n] ]<C-L>", "", ":lnfile" },
							{ "[n] ]L", "", ":llast" },
							{ "[n] ]l", "", ":lnext" },
							{ "[n] ]<C-Q>", "", ":cnfile" },
							{ "[n] ]Q", "", ":clast" },
							{ "[n] ]q", "", ":cnext" },
							{ "[n] ]D (LSP)", "", "Jump to the last diagnostic in the current buffer" },
							{ "[n] ]d (LSP)", "", "Jump to the next diagnostic in the current buffer" },
							{ "[n] gcA (Comment.nvim)", "", "Comment insert end of line" },
							{ "[n] gcO (Comment.nvim)", "", "Comment insert above" },
							{ "[n] gco (Comment.nvim)", "", "Comment insert below" },
							{ "[n] gbc (Comment.nvim)", "", "Comment toggle current block" },
							{ "[n] gb (Comment.nvim)", "<Plug>(comment_toggle_blockwise)", "Comment toggle blockwise" },
							{ "[n] gO (LSP)", "", "vim.lsp.buf.document_symbol()" },
							{ "[n] gri (LSP)", "", "vim.lsp.buf.implementation()" },
							{ "[n] grr (LSP)", "", "vim.lsp.buf.references()" },
							{ "[n] gra (LSP)", "", "vim.lsp.buf.code_action()" },
							{ "[n] grn (LSP)", "", "vim.lsp.buf.rename()" },
							{ "[n] gcc (Comment.nvim)", "", "Comment toggle current line" },
							{ "[n] gc (Comment.nvim)", "<Plug>(comment_toggle_linewise)", "Comment toggle linewise" },
							{
								"[n] gx",
								"",
								"Opens filepath or URI under cursor with the system handler (file explorer, web browser, …)",
							},
							{ "[n] shn (MiniSurround)", "", "Highlight next surrounding" },
							{ "[n] sFn (MiniSurround)", "", "Find next left surrounding" },
							{ "[n] sfn (MiniSurround)", "", "Find next right surrounding" },
							{ "[n] srn (MiniSurround)", "", "Replace next surrounding" },
							{ "[n] sdn (MiniSurround)", "", "Delete next surrounding" },
							{ "[n] shl (MiniSurround)", "", "Highlight previous surrounding" },
							{ "[n] sFl (MiniSurround)", "", "Find previous left surrounding" },
							{ "[n] sfl (MiniSurround)", "", "Find previous right surrounding" },
							{ "[n] srl (MiniSurround)", "", "Replace previous surrounding" },
							{ "[n] sdl (MiniSurround)", "", "Delete previous surrounding" },
							{ "[n] sn (MiniSurround)", "", "Update `MiniSurround.config.n_lines" },
							{ "[n] sh (MiniSurround)", "", "Highlight surrounding" },
							{ "[n] sF (MiniSurround)", "", "Find left surrounding" },
							{ "[n] sf (MiniSurround)", "", "Find right surrounding" },
							{ "[n] sr (MiniSurround)", "", "Replace surrounding" },
							{ "[n] sd (MiniSurround)", "", "Delete surrounding" },
							{ "[n] sa (MiniSurround)", "", "Add surrounding" },
							{
								"[n] <Plug>(comment_toggle_blockwise_count) (Comment.nvim)",
								"",
								"Comment toggle blockwise with count",
							},
							{
								"[n] <Plug>(comment_toggle_linewise_count) (Comment.nvim)",
								"",
								"Comment toggle linewise with count",
							},
							{
								"[n] <Plug>(comment_toggle_blockwise_current) (Comment.nvim)",
								"",
								"Comment toggle current block",
							},
							{
								"[n] <Plug>(comment_toggle_linewise_current) (Comment.nvim)",
								"",
								"Comment toggle current line",
							},
							{ "[n] <Plug>(comment_toggle_blockwise) (Comment.nvim)", "", "Comment toggle blockwise" },
							{ "[n] <Plug>(comment_toggle_linewise) (Comment.nvim)", "", "Comment toggle linewise" },
							{ "[n] <A-l>", ":bprevious<CR>", "Previous buffer" },
							{ "[n] <A-h>", ":bnext<CR>", "Next buffer" },
							{ "[n] <C-S-K>", ":resize -1<CR>", "Decrease height" },
							{ "[n] <C-S-J>", ":resize +1<CR>", "Increase height" },
							{ "[n] <C-S-L>", ":vertical resize +1<CR>", "Increase width" },
							{ "[n] <C-S-H>", ":vertical resize -1<CR>", "Decrease width" },
							{ "[n] <C-Bslash>", ":vne<CR>", "Split window horizontally" },
							{ "[n] <C-_>", ":new<CR>", "Split window vertically" },
							{ "[n] <C-W><C-D> (LSP)", "<C-W>d", "Show diagnostics under the cursor" },
							{ "[n] <C-W>d (LSP)", "", "Show diagnostics under the cursor" },
							{ "[v] <Tab>", "", "vim.snippet.jump if active, otherwise <Tab>" },
							{ "[v] #", "", ":help v_#-default" },
							{ "[v] *", "", ":help v_star-default" },
							{ "[v] @", ":help v_@-default", "mode() ==# 'V' ? ':normal! @'.getcharstr().'<CR>' : '@'" },
							{
								"[v] Q",
								":help v_Q-default",
								"mode() ==# 'V' ? ':normal! @<C-R>=reg_recorded()<CR><CR>' : 'Q'",
							},
							{
								"[v] gb (Comment.nvim)",
								"<Plug>(comment_toggle_blockwise_visual)",
								"Comment toggle blockwise (visual)",
							},
							{ "[v] gra (LSP)", "", "vim.lsp.buf.code_action()" },
							{
								"[v] gc (Comment.nvim)",
								"<Plug>(comment_toggle_linewise_visual)",
								"Comment toggle linewise (visual)",
							},
							{
								"[v] gx",
								"",
								"Opens filepath or URI under cursor with the system handler (file explorer, web browser, …)",
							},
							{
								"[v] <Plug>(comment_toggle_blockwise_visual) (Comment.nvim)",
								'<Esc><Cmd>lua require("Comment.api").locked("toggle.blockwise")(vim.fn.visualmode())<CR>',
								"Comment toggle blockwise (visual)",
							},
							{
								"[v] <Plug>(comment_toggle_linewise_visual) (Comment.nvim)",
								'<Esc><Cmd>lua require("Comment.api").locked("toggle.linewise")(vim.fn.visualmode())<CR>',
								"Comment toggle linewise (visual)",
							},
							{ "[v] <S-Tab>", "", "vim.snippet.jump if active, otherwise <S-Tab>" },
							{ "[v] <C-S> (LSP)", "", "vim.lsp.buf.signature_help()" },
							{ "[i] <S-Tab>", "", "vim.snippet.jump if active, otherwise <S-Tab>" },
							{ "[i] <C-S> (LSP)", "", "vim.lsp.buf.signature_help()" },
							{ "[i] <C-W>", "<C-G>u<C-W>", ":help i_CTRL-W-default" },
							{ "[i] <C-U>", "<C-G>u<C-U>", ":help i_CTRL-U-default" },
							{ "[i] <Tab>", "", "vim.snippet.jump if active, otherwise <Tab>" },
							{ "[x] #", "", ":help v_#-default" },
							{ "[x] *", "", ":help v_star-default" },
							{ "[x] @", ":help v_@-default", "mode() ==# 'V' ? ':normal! @'.getcharstr().'<CR>' : '@'" },
							{
								"[x] Q",
								":help v_Q-default",
								"mode() ==# 'V' ? ':normal! @<C-R>=reg_recorded()<CR><CR>' : 'Q'",
							},
							{
								"[x] gb (Comment.nvim)",
								"<Plug>(comment_toggle_blockwise_visual)",
								"Comment toggle blockwise (visual)",
							},
							{ "[x] gra (LSP)", "", "vim.lsp.buf.code_action()" },
							{
								"[x] gc (Comment.nvim)",
								"<Plug>(comment_toggle_linewise_visual)",
								"Comment toggle linewise (visual)",
							},
							{
								"[x] gx",
								"",
								"Opens filepath or URI under cursor with the system handler (file explorer, web browser, …)",
							},
							{
								"[x] <Plug>(comment_toggle_blockwise_visual) (Comment.nvim)",
								'<Esc><Cmd>lua require("Comment.api").locked("toggle.blockwise")(vim.fn.visualmode())<CR>',
								"Comment toggle blockwise (visual)",
							},
							{
								"[x] <Plug>(comment_toggle_linewise_visual) (Comment.nvim)",
								'<Esc><Cmd>lua require("Comment.api").locked("toggle.linewise")(vim.fn.visualmode())<CR>',
								"Comment toggle linewise (visual)",
							},
						},
						entry_maker = function(entry)
							return {
								value = entry,
								display = table.concat(entry, "  →  "),
								ordinal = table.concat(entry, " "),
							}
						end,
					}),
					sorter = conf.generic_sorter(opts),
					attach_mappings = function(prompt_bufnr, map)
						actions.select_default:replace(function()
							local selection = action_state.get_selected_entry()
							vim.cmd("echo Key: " .. selection.value[1])
						end)
						return true
					end,
				})
				:find()
		end,
	},
})
